// Data source

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Generator

generator client {
  provider = "prisma-client-js"
}

// ===============================================================

// Data Model

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String
  password     String
  type         UserType
  photoUrl     String?
  phone        String         @unique
  docs         Json?
  active       Boolean        @default(false)
  userCompound UserCompound[]
  Invitation   Invitation[]
  scan         Scan[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Announcement Announcement[]
}

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

model Compound {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  logoUrl  String?
  location String?
  settings Json?

  users       UserCompound[]
  invitations Invitation[]
  Device      Device[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Announcement Announcement[]
}

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

model UserCompound {
  id          Int     @id @default(autoincrement())
  streetName  String?
  blockNumber Int?
  unitNumber  Int?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  compoundId Int
  compound   Compound @relation(fields: [compoundId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

model Invitation {
  id        Int            @id @default(autoincrement())
  name      String?
  docs      Json?
  type      InvitationType
  notes     String?
  expiresAt DateTime?

  compoundId Int
  compound   Compound @relation(fields: [compoundId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Scan Scan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

model Scan {
  id Int @id @default(autoincrement())

  invitationId Int?
  invitation   Invitation? @relation(fields: [invitationId], references: [id])

  deviceId Int?
  device   Device? @relation(fields: [deviceId], references: [id])

  success Boolean

  userId Int
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type   ScanType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

model Device {
  id   Int     @id @default(autoincrement())
  name String?
  ip   String?

  compoundId Int
  compound   Compound? @relation(fields: [compoundId], references: [id], onDelete: Cascade)

  Scan Scan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
model Announcement {
  id          Int     @id @default(autoincrement())
  title       String?
  description String?
  photoUrl    String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: NoAction)

  compoundId Int
  compound   Compound @relation(fields: [compoundId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

enum UserType {
  SuperAdmin
  Admin
  Resident
  Security
}

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

enum InvitationType {
  Visitor
  Delivery
}

enum ScanType {
  Resident
  Visitor
  Delivery
}

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
